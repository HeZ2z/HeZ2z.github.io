[{"title":"使用GPT的作文修改流程","url":"/2024/03/22/%E4%BD%BF%E7%94%A8GPT%E7%9A%84%E4%BD%9C%E6%96%87%E4%BF%AE%E6%94%B9%E6%B5%81%E7%A8%8B/","content":"前言本文为借用大模型进行对作文修改的一些方法。此文所写内容在当今来看可能已经过时，请仅供参考。\n重要提醒：！！！在使用AI修改之前，请确保你对英语作文的写作和结构有基本的认识。AI只是作为修改工具，你应该先自行完成作文草稿，然后再用GPT进行修改。这样可以确保修改的方向与你的思路一致（同时也能提高AI的识别准确率）。\n不要盲目听信AI。如果你觉得自己的作文有亮点被修改了，请询问GPT为什么进行了修改，如果你认为修改不妥，可以改回来。毕竟这是你的作文，而不是GPT的。\n不要完全依赖AI的修改建议，如果你认为某些修改不符合您的意愿或风格，可以自行调整。要记住，虽然大型语言模型可以提供有价值的建议，但最终的决定权在于你自己。\n注意事项：\n使用单一窗口进行修改：在整个修改过程中，请尽量在一个窗口内进行，这样GPT可以记住之前的对话和上下文。如果在修改过程中频繁切换窗口，可能会影响GPT的理解和回答。\n\nGPT和批改网的AI有时候会产生矛盾：这并不重要，重要的是通过修改提升写作水平，取得理想的成绩。\n\n英文聊天会更准确：尽量使用英文进行交流，这样GPT的回答会更加贴合文章。不过，如果更习惯使用中文也可以。\n\n\n修改流程：（以下是修改流程的具体步骤，仅供参考，具体使用的时候就把对方当成一个人，想问什么问什么，想怎么说怎么说。注意每次修改的时候都要加入自己的想法，不懂的地方就要问，这又不是真人，只有你自己知道跟他说了什么：）\n\n1.发送提示词(直接复制粘贴，内容来自Github):使用以下提示词来启动GPT，提醒它你需要进行作文修改。提示词：\n\nI want you to act as an AI writing tutor. I will provide you with a student who needs help improving their writing and your task is to use artificial intelligence tools, such as natural language processing, to give the student feedback on how they can improve their composition. You should also use your rhetorical knowledge and experience about effective writing techniques in order to suggest ways that the student can better express their thoughts and ideas in written form.\n\n\n2.发送作文题目和内容:将作文题目和内容发送给GPT，让它检查语法和词汇错误，并给出修改建议。\n\n3.逐段检查:逐段发送作文给GPT，让它修正语法、词汇错误，并优化句式和段落结构。在每一段修改后，仔细检查并根据需要调整。\n\n4.全文检查：:当每个段落都修改完毕后，将整篇作文发送给GPT，检查全文的结构和段落间的衔接问题，并进行必要的修改。\n\n5.请GPT自行写一篇：:最后，可以让GPT自己写一篇文章作为参考，当作范文学习。记得在过程中多与GPT进行互动，询问原因或提出更改意见。\n\n\n其他资料:以下是另外一个详细的教程，供参考：教程链接\n祝你修改顺利！\n","categories":["学习生活"],"tags":["GPT","作文"]},{"title":"OS_2025sp_szb作业题","url":"/2025/05/09/OS-2025sp-szb%E4%BD%9C%E4%B8%9A%E9%A2%98/","content":"\n本文连载于HeZzz的博客 之 OS_2025sp_szb作业题。\n关于操作系统还有OS_2025sp考点。\nszb 的作业题，来源于计算机速通之家 | QQ 群号：468081841，把题目和答案喂给 DeepSeek 后整出来个文档。\n\n前五道解析如下，后面的还在整理。🙇‍♂️🙇‍♂️🙇‍♂️\n题目:\n\n第一次作业(hw1.pdf)\n第二次作业(hw2.pdf)\n\n答案:\n\n答案(ans.pdf)\n\n\nhw1第一题：独木桥同步问题详解\n前两道都是 PV 操作，不熟悉的可以看王道计算机考研-操作系统视频。\n\n1. 每次只允许一人过桥\n问题核心：确保桥的互斥访问，任何时刻仅有一个行人通过。\n实现方法：\n定义一个**互斥信号量 mutex**，初始值为1。\n过桥流程：\n行人到达桥头时执行 P(mutex)（申请锁）：\n若 mutex=1，则获取锁成功，允许过桥。\n若 mutex=0，则阻塞等待。\n\n\n行人过桥后执行 V(mutex)（释放锁），唤醒其他等待的行人。\n\n\n\n\n伪代码示例：semaphore mutex = 1;cobeginprocess traveler() &#123;    P(mutex);   // 申请锁    过桥;    V(mutex);   // 释放锁&#125;coend\n关键点：通过简单的互斥信号量实现“独占式”过桥，逻辑简单但效率较低。\n\n\n2. 同方向可多人，反方向需等待\n问题核心：允许同方向行人批量通过，反方向行人需等待桥空闲。\n实现方法：\n定义资源：\nnumE2W（东向西人数）、numW2E（西向东人数）：统计当前方向的行人数量。\nmutexE2W 和 mutexW2E：保护 numE2W 和 numW2E 的互斥信号量。\nmutex：方向锁，确保同方向优先占用桥。\n\n\n过桥流程（以东向西为例）：\n行人到达时执行 P(mutexE2W)，修改 numE2W：\n若 numE2W == 0（当前方向无行人），执行 P(mutex) 占用桥。\n\n\nnumE2W++，释放 mutexE2W，开始过桥。\n过桥后再次执行 P(mutexE2W)，修改 numE2W：\n若 numE2W == 0（当前方向无后续行人），执行 V(mutex) 释放桥。\n\n\n释放 mutexE2W。\n\n\n伪代码示例（东向西行人）：semaphore mutex = 1, mutexE2W = 1, mutexW2E = 1;int numE2W = 0, numW2E = 0;cobeginprocess travelerE2W() &#123;    P(mutexE2W);       // 保护计数器    numE2W++;    if (numE2W == 1) &#123;        P(mutex);      // 首次占用桥    &#125;    V(mutexE2W);    过桥;    P(mutexE2W);    numE2W--;    if (numE2W == 0) &#123;        V(mutex);      // 最后一人释放桥    &#125;    V(mutexE2W);&#125;coend\n\n\n关键点：\n方向锁机制：首个行人占用桥，后续同方向行人无需等待。\n计数器保护：通过 mutexE2W 和 mutexW2E 避免并发修改计数器的竞态条件。\n\n\n\n\n3. 东向西可多人，西向东仅单人\n问题核心：东向西允许多个行人同时过桥，西向东必须严格互斥。\n实现方法：\n东向西行人：与情况2相同，共享 numE2W 计数器，首个行人占用桥。\n西向东行人：直接使用互斥锁 mutex，每次仅允许一人过桥。\n伪代码示例（西向东行人）：process travelerW2E() &#123;    P(mutex);          // 直接互斥占用桥    过桥;    V(mutex);&#125;\n\n\n关键点：\n不对称设计：东向西方向通过计数器实现批量通过，而西向东方向强制互斥。\n避免死锁：两种方向锁独立，不会因互相等待导致死锁。\n\n\n\n\n总结\n信号量选择：\nmutex：控制桥的占用状态。\nmutexE2W&#x2F;mutexW2E：保护方向计数器的原子性。\n\n\n同步逻辑：\n计数器增减：必须在保护信号量内完成。\n方向锁释放：仅当计数器归零时释放，确保反方向行人能及时获得桥使用权。\n\n\n扩展思考：\n若东西方向同时有人到达，可能引发短暂竞争，但通过锁机制确保最终一致性。\n可通过优化信号量设计（如读写锁）进一步提升并发效率，但需权衡复杂度。\n\n\n\n\n第二题：缓冲区同步与互斥的详细解析问题背景三个进程 P1、P2、P3 共享一个包含 N 个单元的缓冲区：\n\nP1：生成正整数并放入缓冲区。\nP2：从缓冲区取出奇数并统计。\nP3：从缓冲区取出偶数并统计。\n\n需用信号量机制实现以下功能：\n\n互斥：同一时刻只能有一个进程操作缓冲区。\n同步：\nP1 放入数据后，通知 P2 或 P3 取出。\nP2 和 P3 只能取出符合条件的数据（奇数或偶数）。\n\n\n\n\n信号量定义与作用\n\n\n信号量\n初始值\n作用\n\n\n\nmutex\n1\n互斥访问缓冲区，确保同一时间只有一个进程操作缓冲区。\n\n\nempty\nN\n表示缓冲区中空单元的数量，控制 P1 的写入条件。\n\n\neven\n0\n表示缓冲区中偶数的数量，控制 P3 的读取条件。\n\n\nodd\n0\n表示缓冲区中奇数的数量，控制 P2 的读取条件。\n\n\n\n伪代码解析P1（生产者）while (True)&#123;    int x = produce()         // 生成一个正整数    P(empty);              // 申请空缓冲区（若无空位则阻塞）    P(mutex);              // 申请互斥锁    put(x);                // 将 x 放入缓冲区    V(mutex);              // 释放互斥锁    if x % 2 == 0        V(even);           // 通知 P3 有偶数可用    else        V(odd);            // 通知 P2 有奇数可用&#125;\n\n\n关键点：\nP(empty) 先于 P(mutex)：避免死锁（若先申请 mutex 后申请 empty，当缓冲区满时，P1 会持有 mutex 并阻塞，其他进程无法操作缓冲区）。\n根据奇偶性触发对应的信号量（V(even) 或 V(odd)），通知消费者进程。\n\n\n\n\nP2（奇数消费者）while True&#123;    P(odd);                // 等待奇数可用（若无则阻塞）    P(mutex);              // 申请互斥锁    getodd();              // 从缓冲区取出奇数    V(mutex);              // 释放互斥锁    countodd();            // 统计奇数    V(empty);              // 释放一个空单元&#125;\n\n\n关键点：\nP(odd) 先于 P(mutex)：若先申请 mutex，可能因无数据可用而持有锁阻塞，导致死锁。\nV(empty) 表示取出数据后，空单元数量增加。\n\n\n\n\nP3（偶数消费者）while True&#123;    P(even);               // 等待偶数可用（若无则阻塞）    P(mutex);              // 申请互斥锁    geteven();             // 从缓冲区取出偶数    V(mutex);              // 释放互斥锁    counterven();          // 统计偶数    V(empty);              // 释放一个空单元&#125;\n\n\n逻辑与 P2 对称，仅信号量 even 和操作函数不同。\n\n\n同步与互斥流程\n互斥：P1、P2、P3 通过 mutex 保证对缓冲区的互斥访问。\n同步：\n生产者-消费者同步：P1 通过 V(even) 或 V(odd) 通知消费者数据可用。\n缓冲区容量控制：empty 信号量确保 P1 不会在缓冲区满时写入。\n\n\n\n\n答案验证与边界场景\n缓冲区满时：\nP1 因 P(empty) 阻塞，无法继续写入。\nP2 或 P3 取出数据后，V(empty) 唤醒 P1。\n\n\n缓冲区空时：\nP2 或 P3 因 P(odd)/P(even) 阻塞，无法读取。\nP1 写入数据后，V(odd)/V(even) 唤醒对应的消费者。\n\n\n奇偶数据不均衡时：\n若缓冲区中只有奇数，P3 会因 P(even) 阻塞，直到 P1 写入偶数。\n\n\n\n\n总结通过 mutex、empty、even、odd 四个信号量的协同，实现了：\n\n互斥：缓冲区操作的安全性。\n同步：\n生产者与消费者的协调。\n奇偶数据分类通知。\n缓冲区容量动态管理。\n\n\n\n\n第三题：进程调度算法\n五个调度算法都得看一眼吧（）\n\n\n先来先服务（FCFS）\n短作业优先（SJF）\n最短剩余时间优先（SRTF）\n高响应比优先（HRRN）\n优先权调度\n\n题目描述\n4个进程的到达时间与所需CPU时间：\n\n\n\n进程\n到达时间\n所需 CPU 时间\n\n\n\nP1\n0\n10\n\n\nP2\n2\n4\n\n\nP3\n4\n10\n\n\nP4\n6\n5\n\n\n\n要求：\n\n短进程优先（SPF，非抢占）：分析执行顺序，计算平均周转时间和带权平均周转时间。\n最短剩余时间优先（SRTF，抢占）：分析执行顺序，计算平均周转时间和带权平均周转时间。\n\n\n\n\n1. 短进程优先（SPF，非抢占）执行顺序\n0时刻：只有P1到达，开始执行P1（运行时间10）。\nP1执行完成（时刻10）：\n此时已到达的进程有P2（到达时间2）、P3（到达时间4）、P4（到达时间6）。\n选择剩余时间最短的进程：P2（4）、P4（5）、P3（10）。\n执行顺序：P2（4）→ P4（5）→ P3（10）。\n\n\n\n时间轴\nP1：0 → 10（结束时间10）\nP2：10 → 14（结束时间14）\nP4：14 → 19（结束时间19）\nP3：19 → 29（结束时间29）\n\n计算指标\n\n\n进程\n到达时间\n结束时间\n周转时间\n带权周转时间\n\n\n\nP1\n0\n10\n10\n10&#x2F;10 &#x3D; 1\n\n\nP2\n2\n14\n12\n12&#x2F;4 &#x3D; 3\n\n\nP3\n4\n29\n25\n25&#x2F;10 &#x3D; 2.5\n\n\nP4\n6\n19\n13\n13&#x2F;5 &#x3D; 2.6\n\n\n\n平均周转时间：( \\frac{10+12+25+13}{4} &#x3D; 15 )\n带权平均周转时间：( \\frac{1+3+2.5+2.6}{4} &#x3D; 2.275 )\n\n\n2. 最短剩余时间优先（SRTF，抢占）执行顺序\n0时刻：P1开始执行。\n时刻2：P2到达，剩余时间（P1剩余8，P2剩余4）。\nP1被抢占，执行P2（剩余时间更短）。\n\n\n时刻6：P2完成。\n已到达进程：P1（剩余8）、P3（到达时间4，剩余10）、P4（到达时间6，剩余5）。\n选择剩余时间最短的进程：P4（5）→ P1（8）→ P3（10）。\n\n\n时刻11：P4完成。\n剩余进程：P1（剩余8）、P3（剩余10）。\n继续执行P1（剩余8）。\n\n\n时刻19：P1完成。\n最后执行P3（剩余10）。\n\n\n时刻29：P3完成。\n\n时间轴\nP1：0→2（被抢占）→11→19（总运行时间10）\nP2：2→6（结束时间6）\nP4：6→11（结束时间11）\nP3：19→29（结束时间29）\n\n计算指标\n\n\n进程\n到达时间\n结束时间\n周转时间\n带权周转时间\n\n\n\nP1\n0\n19\n19\n19&#x2F;10 &#x3D; 1.9\n\n\nP2\n2\n6\n4\n4&#x2F;4 &#x3D; 1\n\n\nP3\n4\n29\n25\n25&#x2F;10 &#x3D; 2.5\n\n\nP4\n6\n11\n5\n5&#x2F;5 &#x3D; 1\n\n\n\n平均周转时间：( \\frac{19+4+25+5}{4} &#x3D; 13.25 )\n带权平均周转时间：( \\frac{1.9+1+2.5+1}{4} &#x3D; 1.6 )\n\n\n关键点总结\n短进程优先（SPF）：\n\n非抢占，一旦开始执行某进程，除非完成，否则不切换。\n执行顺序取决于进程到达时的剩余时间，优先选择最短的。\n\n\n最短剩余时间优先（SRTF）：\n\n抢占式，当新进程到达时，比较剩余时间，选择最短的立即执行。\n需动态更新剩余时间，可能导致频繁切换。\n\n\n周转时间 &#x3D; 结束时间 - 到达时间\n\n带权周转时间 &#x3D; 周转时间 &#x2F; 服务时间\n\n抢占式算法的优势：减少平均等待时间，但可能增加调度开销。\n\n\n通过对比两种算法，SRTF的平均周转时间（13.25）优于SPF（15），体现了抢占式调度在响应短进程时的优势。\n\n第四题：批处理系统调度的详细问题背景在一个具有两道作业的批处理系统中，作业调度采用短作业优先（SJF）算法，进程调度采用基于优先数的抢占式调度算法（优先数越小，优先级越高）。需分析作业序列的执行顺序、进入内存时间、结束时间，并计算平均周转时间。\n\n作业参数\n\n\n作业名\n到达时间\n估计运行时间\n优先数\n\n\n\nA\n10:00\n40分钟\n5\n\n\nB\n10:20\n30分钟\n3\n\n\nC\n10:30\n50分钟\n4\n\n\nD\n10:50\n20分钟\n6\n\n\n\n调度规则\n作业调度（SJF）：\n当内存有空位时，从后备队列中选择运行时间最短的作业调入内存。\n\n\n进程调度（优先数抢占）：\n从内存中的作业中选择优先数最小的作业执行。\n若新到达的作业优先数更小，则抢占当前作业。\n\n\n\n\n执行过程与时间线1. 初始时刻（10:00）\n作业A到达，直接进入内存并开始执行（此时内存中仅A）。\n内存状态：[A]。\n\n\n2. B到达（10:20）\n作业B到达，内存有空位（系统允许两道作业），B进入内存。\n进程调度：比较A（优先数5）和B（优先数3）。B优先级更高，抢占A。\n执行顺序：B开始执行，A被挂起。\n内存状态：[A, B]。\n\n\n3. B执行结束（10:50）\nB运行30分钟（10:20–10:50），释放内存位置。\n作业调度：从后备队列中选择运行时间最短的作业。此时：\nC（到达时间10:30，运行时间50分钟）。\nD（到达时间10:50，运行时间20分钟）。\n选择D（运行时间更短）。\n\n\n内存状态：[A, D]。\n进程调度：比较A（优先数5）和D（优先数6）。A优先级更高，恢复执行。\n\n\n4. A执行结束（11:10）\nA剩余运行时间20分钟（总40分钟，已运行20分钟），从10:50执行到11:10结束。\n内存状态：[D]（释放一个位置）。\n作业调度：调入C（运行时间50分钟，但此时D已在内存）。\n内存状态：[C, D]。\n进程调度：比较C（优先数4）和D（优先数6）。C优先级更高，开始执行C。\n\n\n5. C执行结束（12:00）\nC运行50分钟（11:10–12:00）。\n内存状态：[D]（释放一个位置）。\n进程调度：执行D（唯一在内存中的作业）。\n\n\n6. D执行结束（12:20）\nD运行20分钟（12:00–12:20）。\n\n\n作业时间表\n\n\n作业名\n进入内存时间\n结束时间\n周转时间\n\n\n\nA\n10:00\n11:10\n70分钟（11:10 - 10:00）\n\n\nB\n10:20\n10:50\n30分钟（10:50 - 10:20）\n\n\nC\n11:10\n12:00\n90分钟（12:00 - 10:30）\n\n\nD\n10:50\n12:20\n90分钟（12:20 - 10:50）\n\n\n\n关键逻辑验证\n作业调度（SJF）触发时机：\n仅在内存有空位时触发（如B结束后调入D，A结束后调入C）。\n\n\n进程抢占逻辑：\nB抢占A（优先数3 &lt; 5），C抢占D（优先数4 &lt; 6）。\n\n\n内存管理：\n系统始终最多容纳两道作业（如B和A共存，C和D共存）。\n\n\n\n\n平均周转时间计算[\\text{平均周转时间} &#x3D; \\frac{70 + 30 + 90 + 90}{4} &#x3D; 70\\ \\text{分钟}]\n\n注意系统之所以在任意时刻内存中最多只维持两道作业，正是依据题目中“具有两道作业的批处理系统”这一设定：\n\n作业调度触发条件\n\n只有当内存中已有作业数小于 2（即出现空闲位置）时，SJF 调度才会从后备队列中再选入一个作业。\n因此，每次调度只补入一个作业，直到内存正好装满两道作业或后备队列为空。\n\n\n进程调度作用范围\n\n进程调度（基于优先数的抢占）始终只在当前已在内存的那两道作业之间进行决策与切换。\n新作业只有被作业调度选中并装入内存后，才有机会参与后续的抢占式执行。\n\n\n\n换言之，系统的双槽（two-slot）内存限制决定了“每次 SJF 只选入一个作业”以及“CPU 调度只在这两道已装入的作业间进行”。\n\n第五题：银行家算法详细解析对银行家算法不熟悉的米娜桑可以先看操作系统-银行家算法。\n\n随便找的视频，若有更好的可以发群里 计算机速通之家 | QQ 群号：468081841 并艾特 9¾\n\n1. T0时刻是否为安全状态？步骤分析：\n\n计算各进程剩余需求（最大需求 - 已分配）：\n\nP1：A&#x3D;5-2&#x3D;3，B&#x3D;5-1&#x3D;4，C&#x3D;9-2&#x3D;7\nP2：A&#x3D;5-4&#x3D;1，B&#x3D;3-0&#x3D;3，C&#x3D;6-2&#x3D;4\nP3：A&#x3D;4-4&#x3D;0，B&#x3D;0-0&#x3D;0，C&#x3D;11-5&#x3D;6\nP4：A&#x3D;4-2&#x3D;2，B&#x3D;2-0&#x3D;2，C&#x3D;5-4&#x3D;1\nP5：A&#x3D;4-3&#x3D;1，B&#x3D;2-1&#x3D;1，C&#x3D;4-4&#x3D;0\n\n\n初始可用资源：A&#x3D;2，B&#x3D;3，C&#x3D;3\n\n寻找安全序列：\n\n第一步：检查 P3（剩余需求A&#x3D;0，B&#x3D;0，C&#x3D;6），但可用C&#x3D;3 &lt; 6，不满足。\n第二步：检查 P5（剩余需求A&#x3D;1，B&#x3D;1，C&#x3D;0），可用资源满足（A&#x3D;2≥1，B&#x3D;3≥1）。分配P5，释放其资源（A&#x3D;3，B&#x3D;1，C&#x3D;4），可用资源变为 A&#x3D;5，B&#x3D;4，C&#x3D;7。\n第三步：检查 P4（剩余需求A&#x3D;2，B&#x3D;2，C&#x3D;1），可用资源满足（A&#x3D;5≥2，B&#x3D;4≥2）。分配P4，释放其资源（A&#x3D;2，B&#x3D;0，C&#x3D;4），可用资源变为 A&#x3D;7，B&#x3D;4，C&#x3D;11。\n第四步：检查 P1（剩余需求A&#x3D;3，B&#x3D;4，C&#x3D;7），可用资源满足（A&#x3D;7≥3，B&#x3D;4≥4）。分配P1，释放其资源（A&#x3D;2，B&#x3D;1，C&#x3D;2），可用资源变为 A&#x3D;9，B&#x3D;5，C&#x3D;13。\n第五步：检查 P2（剩余需求A&#x3D;1，B&#x3D;3，C&#x3D;4），可用资源满足（A&#x3D;9≥1，B&#x3D;5≥3）。分配P2，释放其资源（A&#x3D;4，B&#x3D;0，C&#x3D;2），可用资源进一步增加。\n最终安全序列：P5 → P4 → P1 → P2 → P3（不唯一）。\n\n\n\n结论：T0时刻是安全状态，存在安全序列。\n\n2. 进程P4请求资源（2,0,1），能否分配？步骤分析：\n\n验证请求合法性：\n\nP4的剩余需求：A&#x3D;2，B&#x3D;2，C&#x3D;1 → 请求（2,0,1） ≤ 剩余需求。\n系统当前可用资源：A&#x3D;2，B&#x3D;3，C&#x3D;3 → 请求 ≤ 可用资源。\n\n\n尝试分配并检查安全性：\n\n分配后，可用资源变为：A&#x3D;0，B&#x3D;3，C&#x3D;2。\nP4的已分配资源变为：A&#x3D;4，B&#x3D;0，C&#x3D;5，剩余需求：A&#x3D;0，B&#x3D;2，C&#x3D;0。\n寻找安全序列：\n第一步：分配 P4（剩余需求B&#x3D;2 ≤ 可用B&#x3D;3），释放资源后可用资源变为 A&#x3D;4，B&#x3D;3，C&#x3D;7。\n第二步：分配 P5（剩余需求A&#x3D;1，B&#x3D;1），释放后可用资源变为 A&#x3D;7，B&#x3D;4，C&#x3D;11。\n第三步：分配 P1（剩余需求A&#x3D;3，B&#x3D;4，C&#x3D;7），释放后可用资源变为 A&#x3D;9，B&#x3D;5，C&#x3D;13。\n第四步：分配 P2（剩余需求A&#x3D;1，B&#x3D;3，C&#x3D;4），释放后可用资源进一步增加。\n安全序列：P4 → P5 → P1 → P2 → P3。\n\n\n\n\n\n结论：允许分配，存在安全序列。\n\n3. 在（2）的基础上，进程P1请求资源（0,2,0），能否分配？步骤分析：\n\n当前可用资源（已分配P4请求后）：A&#x3D;0，B&#x3D;3，C&#x3D;2。\n\n验证请求合法性：\n\nP1的剩余需求：A&#x3D;3，B&#x3D;4，C&#x3D;7 → 请求（0,2,0） ≤ 剩余需求。\n可用资源：B&#x3D;3 ≥ 2，其他资源足够。\n\n\n尝试分配并检查安全性：\n\n分配后，可用资源变为：A&#x3D;0，B&#x3D;1，C&#x3D;2。\nP1的已分配资源变为：A&#x3D;2，B&#x3D;3，C&#x3D;2，剩余需求：A&#x3D;3，B&#x3D;2，C&#x3D;7。\n检查安全序列：\n所有进程的剩余需求均无法被满足：\nP3需要C&#x3D;6 &gt; 可用C&#x3D;2；\nP2需要A&#x3D;1 &gt; 可用A&#x3D;0；\nP5需要A&#x3D;1 &gt; 可用A&#x3D;0。\n\n\n\n\n无安全序列，系统进入不安全状态。\n\n\n\n结论：拒绝分配，请求会导致系统不安全。\n\n最终答案\nT0时刻是安全状态，安全序列示例：P5 → P4 → P1 → P2 → P3。\n允许P4请求（2,0,1），存在安全序列（如P4 → P5 → P1 → P2 → P3）。\n拒绝P1请求（0,2,0），分配后系统将处于不安全状态。\n\n\nhw2第1题：页表结构解析\n题目回顾一个32位地址的计算机系统使用二级页表，虚拟地址划分如下：\n\n顶级页表占9位\n二级页表占11位\n\n问题：\n\n页面长度是多少？\n虚拟地址空间有多少个页面？\n\n\n答案与解析1. 页面长度\n计算页内偏移量：虚拟地址总长度为32位，扣除顶级页表（9位）和二级页表（11位），剩余部分为页内偏移量：32 - 9 - 11 = 12 位，因此，页面长度为：2 ^ 12 = 4096 字节 = 4KB\n验证：页内偏移量12位意味着每个页面可寻址4KB空间，这与现代操作系统的标准页面大小一致（如Linux默认4KB）。\n\n\n2. 虚拟地址空间的页面总数\n页号的总位数：页号由顶级页表索引（9位）和二级页表索引（11位）组成，总位数为：9 + 11 = 20 位因此，虚拟地址空间的最大页面数为：2 ^ 20 = 1 M 个页面\n\n\n关键概念总结\n二级页表的作用：\n\n顶级页表（Page Directory）索引二级页表（Page Table），二级页表索引物理页框。\n分层设计减少页表内存占用（无需为未使用的虚拟地址分配二级页表）。\n\n\n地址划分的意义：\n\n顶级页表位（9位）：决定一级页表数量。\n二级页表位（11位）：决定每个一级页表项能映射的二级页表数量。\n页内偏移（12位）：决定页面大小。\n\n\n典型应用场景：\n\n32位系统中，二级页表常用于平衡内存占用与地址映射效率。例如，x86架构的经典分页模式（10位顶级页表 + 10位二级页表 + 12位偏移）。\n\n\n\n\n常见疑问解答为什么总页号位数是20位？顶级页表（9位）和二级页表（11位）共同确定一个物理页框，因此页号总位数为两者之和。每个页号对应唯一的物理页框，总页数为 2^20。\n如果页面长度改为8KB，地址划分会如何变化？页内偏移量需要13位（2^13 = 8KB），此时顶级页表和二级页表的位数之和为：32 - 13 = 19 位可能划分为9位 + 10位，或其他组合。\n\n结论通过分析虚拟地址的划分，可以得出：\n\n页面长度：4KB\n虚拟地址空间页面数：1M个这一结果与二级页表的设计逻辑完全吻合，体现了分页机制在内存管理中的核心作用。\n\n\n第2题：虚拟地址转换一、题目条件\n用户编程空间：共 32 个页面，每页 1KB（即 1024 字节）。\n\n物理内存：大小为 16KB，划分为 16 个物理块，每块 1KB。\n\n页表（部分）：\n\n\n\n页号\n物理块号\n\n\n\n0\n5\n\n\n1\n10\n\n\n2\n4\n\n\n3\n7\n\n\n\n逻辑地址：0A5C(H)（十六进制）\n\n\n\n二、地址结构分析\n页数为 32 → 页号需占 5 位（$2^5 &#x3D; 32$）\n每页大小为 1KB → 页内偏移需占 10 位（$2^{10} &#x3D; 1024$）\n因此逻辑地址总长度为 5 + 10 &#x3D; 15 位\n\n\n三、逻辑地址解析\n原始逻辑地址：0A5C(H) &#x3D; 0000 1010 0101 1100(B)（16位）\n\n舍弃最高冗余位后，取低 15 位：000 1010 0101 1100\n\n前 5 位：页号 &#x3D; 00010(B) &#x3D; 2(₁₀)\n后 10 位：页内偏移 &#x3D; 1001011100(B) &#x3D; 604(₁₀) &#x3D; 25C(H)\n\n\n\n\n四、查页表获取物理块号\n页号 2 对应的物理块号为 4\n\n\n五、计算物理地址十六进制加法方式\n每块大小：1KB &#x3D; 2 ^ 10 字节\n物理块号 4 的起始地址：4 × 1KB &#x3D; 2 ^ 12 &#x3D; 1000H（十六进制）\n偏移量:25CH\n最终物理地址：1000H + 25CH &#x3D; 125CH\n\n\n计算说明：\n\n块号转起始地址：\n块号 4 × 每块大小 1024 &#x3D; 4096（十进制） &#x3D; 1000H。\n\n\n偏移量直接使用：\n逻辑地址中的偏移量为 25CH。\n\n\n物理地址合成：\n起始地址 1000H + 偏移量 25CH &#x3D; 125CH。\n\n\n\n结论：物理地址为 125CH。\n\n六、验证与结论\n页号 &#x3D; 2（已在页表中）\n偏移量 &#x3D; 604 ∈ [0, 1023]（合法范围）\n最终物理地址 &#x3D; 125C(H)\n\n\n七、常见问题解答\n\n\n问题\n解答\n\n\n\n为何逻辑地址为 15 位？\n5 位页号 + 10 位偏移，共 15 位，题中地址为 16 位，需去除最高冗余位。\n\n\n页表未包含页号 4~31 如何处理？\n若访问这些页，将触发缺页异常，操作系统需将页面调入内存。题目未涉及此情形。\n\n\n\n第3题：页面置换算法详细解析\nDeepSeek 把自己绕进去了，这里只留下大概的解析，具体的缺页表格可以看 ans.pdf（就是文章最开始的答案文件）。缺页这部分只考这三个算法，米娜桑不熟悉的找找视频看看书。放个视频（存档）操作系统页面置换算FIFO,OPT,LRU做题速成。\n\n题目要求\n页面走向：1, 2, 3, 4, 2, 3, 5, 6, 3, 1, 4, 6, 7, 5, 2, 4, 1, 3, 2\n物理块数：3个\n算法：FIFO、OPT、LRU\n目标：计算缺页中断次数和缺页率\n\n\n1. FIFO（先进先出）算法核心思想：替换最早进入内存的页面。模拟过程：\n\n维护一个队列记录页面进入顺序，缺页时替换队首页面，新页面加入队尾。\n\n缺页次数 ：14次\n缺页率 ：14 &#x2F;19\n\n2. OPT（最佳置换）算法核心思想：替换未来最长时间不会被访问的页面。模拟过程：\n\n预知未来访问序列，选择最晚被访问的页面替换。\n\n缺页次数：8次缺页率：8 &#x2F; 19\n\n3. LRU（最近最久未使用）算法核心思想：替换最近最久未被访问的页面。模拟过程：\n\n维护访问顺序，每次访问后更新页面为“最近使用”，缺页时替换最久未使用的页面。\n\n缺页次数：13次缺页率：13 &#x2F; 19\n\n总结\n\n\n算法\n缺页次数\n缺页率\n\n\n\nFIFO\n14\n14 &#x2F; 19\n\n\nOPT\n8\n8 &#x2F; 19\n\n\nLRU\n13\n13 &#x2F; 19\n\n\n关键结论：\n\nFIFO 性能最差，因其无法适应访问模式的局部性。\nOPT 是理论最优解，但需预知未来访问序列，实际不可行。\nLRU 接近 OPT，但需要维护访问历史，开销较大。在此例中，由于存在周期性重复访问旧页面，LRU表现略逊于理论预期。\n\n\n第4题：TLB与缺页中断的详细解析题目条件\n系统参数：\n\n页面大小：4KB（页内偏移占12位）。\n内存访问时间：100ns，TLB访问时间：10ns。\n缺页处理时间：108ns（包含更新TLB和页表的时间）。\n驻留集大小固定为2，采用LRU置换算法和局部淘汰策略。\nTLB初始为空，且正常页表访问后不更新TLB（仅在缺页处理后更新）。\n\n\n页表初始状态：\n\n\n\n页号\n页框号\n有效位\n\n\n\n0\n101H\n1\n\n\n1\n–\n0\n\n\n2\n254H\n1\n\n\n\n\n\n逻辑地址访问分析1. 访问逻辑地址 2362H\n地址分解：\n\n十六进制 2362H → 二进制 0010 0011 0110 0010。\n页号：高4位 0010（十进制2）。\n页内偏移：低12位 362H。\n\n\n转换流程：\n\n访问TLB：初始为空，未命中（耗时10ns）。\n访问页表：页号2有效，页框号为 254H（耗时100ns）。\n访问物理地址：（耗时100ns）。\n总时间：10 + 100 + 100 = 210ns。\n\n\n\n\n2. 访问逻辑地址 1565H\n地址分解：\n\n十六进制 1565H → 二进制 0001 0101 0110 0101。\n页号：高4位 0001（十进制1）。\n页内偏移：低12位 565H。\n\n\n转换流程：\n\n访问TLB：未命中（耗时10ns）。\n访问页表：页号1无效（有效位为0），触发缺页中断。\n缺页处理：\n驻留集大小为2，当前驻留页为0和2（根据初始页表）。\n根据LRU算法，淘汰最近最少使用的页0（假设页0未被近期访问）。\n将页1装入原页0的页框 101H，更新页表（耗时108ns）。\n更新TLB：缺页处理包含TLB更新，页1的映射被缓存。\n\n\n重新执行指令：\nTLB命中页1（耗时10ns）。\n物理地址（耗时100ns）。\n\n\n总时间：10（TLB） + 100（页表） + 108（缺页） + 100（物理地址） = 318ns。\n\n\n\n\n3. 访问逻辑地址 25A5H\n地址分解：\n\n十六进制 25A5H → 二进制 0010 0101 1010 0101。\n页号：高4位 0010（十进制2）。\n页内偏移：低12位 5A5H。\n\n\n转换流程：\n\n访问TLB：假设在缺页处理后，TLB中已缓存页2的映射（因题目未明确禁止缺页处理外的TLB更新）。\nTLB命中：直接获取页框号 254H（耗时10ns）。\n访问物理地址：物理地址（耗时100ns）。\n总时间：10 + 100 = 110ns。\n\n\n\n答案总结\n\n\n逻辑地址\n转换步骤与时间（ns）\n\n\n\n\n2362H\nTLB未命中 → 页表 → 物理地址（10+100+100 &#x3D; 210）\n\n\n\n1565H\nTLB未命中 → 页表 → 缺页 → 更新TLB → 物理地址（10+100+108+100 &#x3D; 318）\n\n\n\n25A5H\nTLB命中 → 物理地址（10+100 &#x3D; 110）\n\n\n\n1565H 逻辑地址转换为物理地址步骤1：分解逻辑地址\n逻辑地址：1565H（十六进制）\n二进制表示：0001 0101 0110 0101\n页面大小：4KB &#x3D; (2^{12}) → 页内偏移占低12位，页号占剩余高位。\n\n\n\n\n部分\n二进制值\n十六进制值\n\n\n\n页号（高4位）\n0001\n1\n\n\n页内偏移（低12位）\n0101 0110 0101\n565H\n\n\n\n步骤2：查询页表根据题目给出的页表：\n\n\n\n页号\n页框号\n有效位\n\n\n\n0\n101H\n1\n\n\n1\n–\n0\n\n\n2\n254H\n1\n\n\n\n页号1的状态：有效位为0 → 缺页，需触发缺页中断。\n\n\n步骤3：处理缺页中断\n驻留集限制：系统为进程分配固定2个物理页框，当前驻留页为0和2。\n置换策略：\nLRU算法：淘汰最近最少使用的页。\n局部淘汰策略：仅淘汰属于该进程的页面（此处为页0或页2）。\n\n\n淘汰页0：\n假设页0是最近未被访问的页（题目未提供历史访问记录，默认淘汰页0）。\n将页0的页框号 101H 分配给页1，并更新页表：\n\n\n页号\n页框号\n有效位\n\n\n\n1\n101H\n1\n\n\n\n\n\n\n\n步骤4：生成物理地址\n页框号：101H\n页框基地址：101H &lt;&lt; 12 = 101000H（左移12位对齐）。\n页内偏移：565H\n\n物理地址 &#x3D; 物理块号(101H) 拼接 页内偏移(565H) &#x3D; 101565H\n\n第5题：FIFO，LRU\n还是缺页中断，注意 若该作业的第0页已经装入主存 。\n\n题目条件\n字地址序列：115, 228, 120, 88, 446, 102, 321, 432, 260, 167\n主存容量：300字（3个页框，每页100字）\n初始状态：第0页已装入内存。\n\n\n关键步骤\n地址到页号的转换根据页大小（100字），将地址转换为页号：\n\n\n\n地址\n页号\n\n\n\n115\n1\n\n\n228\n2\n\n\n120\n1\n\n\n88\n0\n\n\n446\n4\n\n\n102\n1\n\n\n321\n3\n\n\n432\n4\n\n\n260\n2\n\n\n167\n1\n\n\n页号序列：1, 2, 1, 0, 4, 1, 3, 4, 2, 1\n\n初始内存状态\n\n初始内存包含页0，剩余两个页框为空。\n\n\n\n\n答案\n\n\n算法\n缺页中断次数\n缺页率\n\n\n\nFIFO\n3\n3 &#x2F; 10\n\n\nLRU\n4\n4 &#x2F; 10\n\n\n\n第6题：FIFO与Clock算法解析\nClock 算法，会考吗？\n\n题目条件\n逻辑地址空间与物理地址空间：均为64KB（按字节编址），即$2^{16}$字节。\n页大小：1KB（$2^{10}$字节），页内偏移占10位。\n页号位数：逻辑地址总位数16位，页号占6位（16-10&#x3D;6）。\n进程需求：最多需6页，当前分配4个页框（固定分配局部置换策略）。\n当前页表状态（时刻260）：\n\n\n\n\n页号\n页框号\n装入时间\n访问位\n\n\n\n0\n7\n130\n1\n\n\n1\n4\n230\n1\n\n\n2\n2\n200\n1\n\n\n3\n9\n160\n1\n\n\n\n逻辑地址：17CAH\n\n\n（1）逻辑地址对应的页号\n逻辑地址转换：\n17CAH &#x3D; 二进制：0001 0111 1100 1010（16位）。\n页内偏移：低10位（1111 001010）→ 3CA(H)。\n页号：高6位（000101）→ 十进制为 5。\n\n\n\n结论：逻辑地址对应的页号为5。\n\n（2）FIFO置换后的物理地址\n缺页处理：\n页号5不在内存中，触发缺页中断。\nFIFO策略：淘汰最早装入的页。\n当前页框分配：页0（装入时间130）、页3（160）、页2（200）、页1（230）。\n淘汰页0，其页框7分配给页5。\n\n\n\n\n物理地址计算：\n页框号7的二进制表示：000111（6位）。\n页内偏移：3CA(H)（低10位）。\n物理地址：000111（页框号） + 001111001010（偏移量）→ 二进制：0001111111001010 &#x3D; 1FCA(H)（十六进制）。\n\n\n\n结论：**FIFO置换后的物理地址为1FCA(H)**。\n\n（3）Clock置换后的物理地址\nClock算法流程：\n初始指针指向2号页框（对应页2，页框号2）。\n第一轮扫描（所有访问位为1）：\n页框2（访问位1）→ 置0，指针顺时针移动到页框9。\n页框9（访问位1）→ 置0，指针移动到页框7。\n页框7（访问位1）→ 置0，指针移动到页框4。\n页框4（访问位1）→ 置0，指针回到页框2。\n\n\n第二轮扫描：\n页框2（访问位0）→ 选中置换。\n\n\n\n\n缺页处理：\n淘汰页2，其页框2分配给页5。\n\n\n物理地址计算：\n页框号2的二进制表示：000010（6位）。\n页内偏移：3CA(H)（低10位）。\n物理地址：000010（页框号） + 001111001010（偏移量）→ 二进制：0000101111001010 &#x3D; 0BCA(H)（十六进制）。\n\n\n\n结论：**Clock置换后的物理地址为0BCA(H)**。\n\n关键总结\n页号计算：\n逻辑地址高6位直接映射页号，低10位为页内偏移。\n\n\nFIFO策略：\n基于页的装入时间淘汰最早进入的页。\n物理地址由页框号 + 偏移量组成。\n\n\nClock算法：\n通过循环检查访问位（Reference Bit）选择置换页。\n若所有访问位为1，则先置0后重新扫描。\n\n\n物理地址生成：\n页框号（6位）与页内偏移（10位）组合为16位物理地址，需注意二进制与十六进制的转换。\n\n\n\n\n常见问题\n页框号如何确定？页框号由操作系统分配，题目中已明确给出页框号（如页0→7，页1→4等）。\nClock算法中指针移动方向？指针按顺时针方向移动（页框2→9→7→4→2）。\n访问位（Reference Bit）的作用？标记页面是否被访问过，优先淘汰未被访问的页面（访问位为0）。\n\n\n最终答案：\n\n（1）页号为 5。\n（2）FIFO物理地址为 **1FCA(H)**。\n（3）Clock物理地址为 **0BCA(H)**。\n\n\n结语 &amp; 更新日志预祝大家考试顺利，金榜题名！\n更新日志：\n\n添加了结语\n添加了星月夜奶茶鼠\n优化了一些排版\n更新了 hw2\n移除了 Him\n\n\n","categories":["学习"],"tags":["OS"]},{"title":"关于未来走向","url":"/2024/05/12/%E5%85%B3%E4%BA%8E%E6%9C%AA%E6%9D%A5%E8%B5%B0%E5%90%91/","content":"这里讲一下本站未来的走向和规划关于之前本站是一个个人博客，主要用于记录一些生活的内容，但是因为 我比较懒 个人精力有限，所以更新频率不高，内容也比较零散。\n由于个人隐私原因，之前博客全部删除，现在重新开始。\n关于未来现在我已经转专业到计算机科学与技术专业。\n相比于之前，现在有更多的时间专注于计算机技术方面的学习。所以目前的计划是将本站转变为一个技术博客，主要记录一些技术相关的内容。但是如果日常生活中有一些有趣的事情，也会记录在这里。\n","categories":["未来规划"]},{"title":"OS_2025sp考点","url":"/2025/05/08/OS2025sp%E8%80%83%E7%82%B9/","content":"\n本文连载于HeZzz的博客 之 OS_2025sp考点\n关于操作系统还有OS_2025sp_szb作业题。\n文章根据王虎老师最后一课整理。由于时间有限，可能会有遗漏，欢迎补充。结尾加了 szb 的题目和答案。\n\n王虎老师最后一课视频如下：\n⚠️友情提醒：本视频仅限于教学使用，未经允许严禁用于与教学无关的用途。\n前三个为直接下载视频，可不登陆。（我也想直接嵌入页面，但是这玩意是 HTTP，我用的 Github Pages 使用 HTTPS 协议😭 ）\n监控视角视频下载\n黑板监控视角视频下载\nPPT视角视频下载\n云课堂链接(需登录账号，即OS老师为王虎)\nPS:监控视角的语音比较糊，PPT视角的会好一点，考虑到并没有用到任何多媒体（即语音部分为全部有用内容），推荐大家看PPT视角的。\n\n接下来是真正的笔记了\n\n第一章 概论1. 操作系统的定义和功能\n定义：什么是操作系统？\n功能：\n进程管理\n存储管理\n设备管理\n文件管理\n网络通信与服务\n安全与保护\n\n\n\n2. 操作系统的四个特征\n重点掌握原因和特点！\n\n\n并发性\n共享性\n虚拟性\n随机性\n\n3. 操作系统的发展\n批处理：\n联机批处理\n脱机批处理\n多道批处理（特点）\n\n\n分时操作系统（特点与特征）：\n与批处理的区别\n\n\n\n4. 操作系统的接口\n程序接口（包含哪些类型？）\n操作接口（包含哪些类型？）\n\n\n第二章 进程管理1. 程序的运行方式\n程序的顺序运行（概念、定义、特征）\n程序的并发运行（概念、定义、特征）\n程序的并行运行（概念、定义、特征）\n\n2. 进程的概念\n什么是进程？程序？作业？\n\n3. 进程的状态及转换（重点）\n三态：\n就绪状态\n运行状态\n阻塞状态\n\n\n进程状态转换图\n什么事PCB？\n挂起与激活（特征）\n阻塞与唤醒挂起（特征）\n\n4. 进程的控制\n阻塞与唤醒进程\n挂起与激活进程\n\n5. 进程的互斥与同步\n临界资源与临界区（掌握）\n\n6. 进程同步机制\n信号量（含义）\nP操作与V操作（做了什么）\n参考内容：p45-46\n\n7. 进程同步经典问题\n进程控制\n多生产者多消费者\n读者写者\n参考内容：p46-48\n\n8. 进程调度\n三级模型：\n高级调度\n中级调度\n低级调度\n\n\n调度算法：\n先来先服务（FCFS）\n短作业优先（SJF）\n最短剩余时间优先（SRTF）\n高响应比优先（HRRN）\n优先权调度\n\n\n关键指标：运行时间、平均时间\n参考内容：p56-62\n\n9. 死锁\n什么是死锁？\n四个必要条件：\n互斥条件\n请求与保持条件\n不剥夺条件\n环路等待条件\n\n\n银行家算法（过程）\n参考内容：p69（需搞清楚）\n\n\n第三章 内存管理1. 覆盖技术与交换技术\n比较：p101\n\n2. 可变分区内存管理\n参考内容：p106-107\n内存分配方法：\n最先适应分配算法\n循环首次适应分配算法\n最优适应分配算法\n最坏适应分配算法\n快速适应分配算法\n\n\n\n3. 页式存储管理\n逻辑地址到物理地址的转换\n多级页表\n\n4. 段式存储管理\n分段与分页的比较\n\n5. 虚拟存储技术（p118）\n请求页式虚拟存储管理（缺页中断次数，缺页率）\n页面置换算法：\n先进先出（FIFO）\n最佳页面置换（OPT）\n最近最久未使用（LRU）\n\n\n页面调入策略与页面分配策略（关联）\n\n\n第四章 设备管理1. 设备的分类（p151）\n按服务功能分类\n按每次信息交换的单位分类\n按使用特征分类\n\n2. 四种设备的控制方法（输入输出方式）(p154)\n程序循环查询方式\n中断驱动方式\n直接内存访问（DMA）方式\n通道方式\n\n3. SPOOLing 技术（p168）\n假脱机技术\n输入井与输出井（基本原理、工作原理）\n\n\n第五章 文件系统1. 文件的逻辑结构和物理结构（p203）\n逻辑结构：\n流式结构\n记录式结构：\n顺序式\n索引式\n索引顺序式\n\n\n\n\n物理结构（区别与优缺点）：\n连续文件\n链接文件\n索引文件\n多级索引文件（计算：p212）\n直接文件\n\n\n\n2. 文件的目录（p216）\n文件目录的基本概念\n文件控制块的作用与控制方法\n\n3. 文件的访问方式4. 文件存储空间的管理方法（p214）\n磁盘空间的分配：\n连续分配\n非连续分配\n\n\n磁盘空闲空间的有效管理：\n空闲区表法\n空闲块链表法\n\n\n\n\n考试1. 计算题\n求缺页率\n逻辑地址到物理地址的转换\n\n2. 综合题\nPV操作\n死锁\n文件大小与索引计算\n进程调度（周转时间、平均周转时间、带权周转时间）\n\n\nszb 作业\n来源于计算机速通之家 | QQ 群号：468081841\n\n题目:\n\n第一次作业(hw1.pdf)\n第二次作业(hw2.pdf)\n\n答案:\n\n答案(ans.pdf)\n\nDeepSeek 解析:\n\nOS_2025sp_szb作业题\n\n","categories":["学习"],"tags":["OS"]},{"title":"关于OpenWrt路由器及哆点Drcom校园网WEB自动登录","url":"/2024/06/03/%E5%85%B3%E4%BA%8Eopenwrt%E8%B7%AF%E7%94%B1%E5%99%A8%E5%8F%8A%E5%93%86%E7%82%B9Drcom%E6%A0%A1%E5%9B%AD%E7%BD%91WEB%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/","content":"前言最近买了新华三NX30Pro路由器(下文简称”华三”)，我的需求就是千兆、能刷OpenWrt进行二次开发，WIFI6这些。而华三满足这些，且价格合适，所以就入手了。这里记录一下路由器的一些配置和使用。\n哆点Drcom校园网认证系统为广州热点软件科技股份有限公司研发，若你的校园网登录界面有本计费系统由广州热点软件科技股份有限公司提供字样，那么你可以参考这篇文章。\n目前已知使用此系统大学:\n\n中国矿业大学\n\n准备工作需要：\n\n硬件：\n\n新华三NX30Pro路由器、两条网线、可插网线的电脑\n\n旧路由器（可选）\n\n如果旧路由器工作正常。网线 1 一端连接 旧路由器 的 LAN 口，对端连接 华三 的 WAN 口；网线 2 一端连接 华三 的 LAN 口，对端连接电脑的网口\n如果旧路由器无法工作。网线 1 一端连接 华三 的 WAN 口，对端连接宽带；网线 2 一端连接 华三 的 LAN 口，对端连接电脑的网口\n\n\n\n\n软件：\n\nPuTTY（用于SSH连接）、浏览器(推荐使用Firefox、Chrome、Edge)、TFTP工具（用于刷写固件）\n\n启用电脑的 Telnet 服务：在Windows上启用Telnet服务，你可以按照以下步骤操作：\n\n\n打开“控制面板”。\n\n\n\n点击“程序”。\n\n\n\n在“程序和功能”部分点击“打开或关闭Windows功能”。\n\n\n\n在弹出的窗口中，找到并勾选“Telnet客户端”。\n\n\n\n点击“确定”按钮。\n\n\nPS：启用Telnet服务后，你可以使用Windows的Telnet客户端连接到路由器。但是，请注意，Telnet协议不安全，所有的内容都是明文传输，包括你的密码。因此，建议只在安全的内部网络中使用Telnet，或者使用更安全的替代品，如SSH。\n\n\n\n\n待刷写镜像及工具的下载：\n\n\n\n\n\n文件名\n描述\n下载\n\n\n\nopenwrt-*-preloader.bin\nBL2\n页面\n\n\nOpenWrt-*-bl31-uboot.fip\nFIP\n同上\n\n\nOpenWrt-*-initramfs-recovery.itb\ninitramfs 镜像\n同上\n\n\nOpenWrt-*-squashfs-sysupgrade.itb\nSysupgrade 镜像\n同上\n\n\nTftpd64-4.64-setup.exe\nTFTP 工具安装包\n链接\n\n\nPuTTY\nSSH 客户端\n链接\n\n\n⚠️ 为了避免无线局域网的干扰，可以暂时将电脑的无线网络断开。\n刷OpenWrt到手之后简单看了一下原厂固件。发现并不能满足我校园网自动登录的需求，所以就决定刷OpenWrt。\n按照Eric的文章一步一步来，最终成功刷入。\nPS:刷入的时候还是需要网络的，可以留着之前的路由器，然后分出一个lan口插入华三的wan口，这样既可以配置也可以联网。还有就是我没有刷入主题，这部分应该是无关紧要，各位自行判断。\n配置校园网自动登录我们的校园网是需要登录的，而OpenWrt默认并没有这个功能。所以需要自己写一个脚本来实现。\n1. 抓取curl登录请求（这一步我已经帮你干完了，不感兴趣的话可以直接往下划到编写登陆脚本）\n首先抓取登录页面的 form表单，然后用 curl发送 post请求，最后检查是否登录成功。\n以Firefox为例\n\n\n打开Firefox，打开校园网登录界面，按 F12打开开发者工具，切换到 网络选项卡，然后输入账号密码登陆校园网。\n\n\n\n在 网络选项卡中找到 login请求\n\n\n\n通过 响应找到含有 认证成功的内容，回到 消息头，右键点击，选择 复制，然后选择 复制为cURL（bash）。\n\n\n\n筛选 消息头，找到含有你的账号密码的内容，并复制。\n\n\n\n\n\n2. 编写登录脚本首先，我们需要在路由器上安装 curl，这个工具是用来发送请求的。用PuTTY连接到路由器，然后输入以下命令安装 curl：\nopkg updateopkg install curl\n\n我们需要写一个自动登录的脚本。创建一个文件夹\nmkdir /root/auto_logincd /root/auto_loginvi login.sh\n\n然后输入以下内容，注意修改账号密码，请按照实际情况自行测试：\n#!/bin/sh# 用户账户和密码。# 运营商：学号后面加@unicom为中国联通，@cmcc为中国移动，@telecom为中国电信。# 校园网登录只填学号，不填运营商。USER_ACCOUNT=&quot;11230909@cmcc&quot;USER_PASSWORD=&quot;xxxxxx&quot;# 发送登录请求curl &quot;http://10.2.5.251:801/eportal/?&quot; \\-G \\--data-urlencode &quot;c=Portal&quot; \\--data-urlencode &quot;a=login&quot; \\--data-urlencode &quot;login_method=1&quot; \\--data-urlencode &quot;user_account=$&#123;USER_ACCOUNT&#125;&quot; \\--data-urlencode &quot;user_password=$&#123;USER_PASSWORD&#125;&quot; \\\n\n接下来给脚本运行权限：\nchmod +x login.sh\n\n然后我们可以先注销，再手动运行一下脚本，看看是否能够成功登录：\n./login.sh\n\n若是出现 认证成功及其类似字样，则说明登录成功。\n至此，一个自动登录的脚本就成功了。\n3. 开机自启以及断网重联我们可以将脚本设置为开机自启，以及断网重连。开机自启可以通过 /etc/rc.local实现，断网重连可以通过 crontab实现。\n1 开机自启编辑 /etc/rc.local文件：\nvi /etc/rc.local\n\n在文件中添加以下内容：\n/root/auto_login/login.sh\n\n:wq，保存退出。\n2 断网重连\n\n我们可以通过 ping命令来检测网络是否正常，如果网络不正常，我们就执行 auto_login.sh脚本。\n\n可以直接在登录文件夹下创建一个 ping.sh文件：\ncd /root/auto_loginvi ping.sh\n\n然后输入以下内容：\n#!/bin/sh# ping 的总次数PING_SUM=3# ping 的间隔时间，单位秒SLEEP_SEC=10# 时间= (SLEEP_SEC * PING_SUM + 20) * REBOOT_CNTREBOOT_CNT=3cnt=0reboot_cnt=1while :do    ping -c 1 -W 1 www.baidu.com &gt; /dev/null    ret=$?    ping -c 1 -W 1 www.bilibili.com &gt; /dev/null    ret2=$?    if [[ $ret -eq 0 || $ret2 -eq 0 ]]    then        echo -e &#x27;network is ok\\r&#x27;        exit    else        cnt=`expr $cnt + 1`        printf &#x27;-&gt; [%d/%d] Network maybe disconnected, checking again after %d seconds!\\r\\n&#x27; $cnt $PING_SUM $SLEEP_SEC         if [ $cnt == $PING_SUM ]        then            echo &#x27;try to re curl&#x27;            echo &#x27;ifup wan!!!&#x27;            sleep 5            sh /root/auto_login/login.sh        fi    fi      sleep $SLEEP_SECdone\n\n:wq，保存退出。\n给脚本运行权限：\nchmod +x ping.sh\n\n然后我们可以先注销，再手动运行一下脚本，看看是否能够成功登录：\n./ping.sh\n\n接下来使用crontab，它是一个用于执行定时任务的工具，我们可以通过它来实现重连。编辑 /etc/crontabs/root文件：\n\nvi /etc/crontabs/root\n\n在文件中添加以下内容：\n*/1 * * * * /root/auto_login/ping.sh\n\n这里的 */1 * * * *表示每1分钟执行一次 ping.sh脚本，如有需要可以修改。\n注意：我们需要查看crontab是否已经启动，如果没有启动，我们需要手动启动：\n/etc/init.d/cron status\n\n如果没有启动，我们可以通过以下命令启动：\n/etc/init.d/cron start\n\n同时，我们可以把它添加到开机自启：\n/etc/init.d/cron enable\n\n这样就可以实现断网重连了。\n\n\n至此，我们就实现了校园网自动登录以及断网重连。🍾🍾🍾\n若有问题，欢迎和我邮件联系HeZ2z@foxmail.com，我会尽量回复。\n参考链接：\n华三NX30Pro路由器刷OpenWrt-Eric-个人博客\nOpenWrt实现校园网自动登录-叶子在行动-博客园\nOpenWrt校园网自动登录且断网重连-in dreaming-CSDN\n\n","categories":["网络"],"tags":["路由器","校园网自动登录"]},{"title":"转计算机专业相关","url":"/2024/05/20/%E8%BD%AC%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E7%9B%B8%E5%85%B3/","content":"声明本博客文章仅代表作者的个人观点和经验，旨在为有意向转专业的学弟学妹提供参考意见。文中的信息和建议仅供参考，并不构成任何法律、学术或专业建议。请在做出任何决定之前，务必自行查证相关信息并考虑个人的具体情况。\n课程推荐仅供参考，具体情况请各位根据自身情况做出决定。\n由于学校招生调剂情况，24届好多人要转专业，而且政策可能会变，以下仅供参考，具体情况请各位随机应变。\n如果下列超链接中，有你打不开的，请谨慎选择是否转计算机类专业。\n前言大晚上睡不着，写一下转专业这件事。我是一个物理系的学生，志愿填报失误加上分数差一点，所以没有被计算机录取。可是当转专业报名系统开放的那一天，我发现我还是忘不了计算机。\n各位转专业之前想好是否真的热爱或者有理由转。\n转专业的流程(以最新一次即2024年5月转专业为例)转计算机就是初筛，机考，面试。\n三步都过了就成功啦！\n初筛据计算机学院2024年普通本科生转专业实施方案所写。\n\n按照核心基础课成绩和学分加权平均成绩排序。首先，按照学生的数学（《高等数学》）或（《数学分析》+《高等代数》）成绩占 50%和学分加权平均成绩占 50%，由高到低进行排序。其次，若成绩相同，则按数学成绩排序，若数学成绩相同，则按《大学英语》成绩排序。最后，按拟接收人数最高 150%的比例确定进入专业学习能力测试环节的学生名单。\n\n初筛前几年(2023年及以前)只看高数的加权，而2024年除了高数还有总加权，所以大一还是要好好学一下，最起码总加权能到85左右比较保险。当然也出现过60多参加机考的，不过大部分也过不了机考就是了。\n高数可以看MIT Calculus Course(18.01和18.02)，就是对应的微积分课程便好。学校考试的范围有超出，可以去B站看一高数速通一下，然后做做往年的高数真题，基本也差不多了。\n专业课什么的自己去学，这里不多赘述。\n机考据计算机学院2024年普通本科生转专业实施方案所写。\n\n专业学习能力测试。主要侧重计算机编程能力和潜力考核，满分为100分。若测试成绩≥68分，则进入后续面试环节；若测试成绩&lt;68 分则淘汰，不参加后续选拔环节。\n\n简单来说，机考就是会有一些编程题，你做题，老师打分，然后及格线上的会去面试。\n感谢学长整理的的中国矿业大学转计算机学院机考试题 ,这里不仅有往年的机考试题还有学校以及学院的相关政策，可以让大家先有一个充分的了解。\n编程语言方面可以使用C、C++或者Python。建议之前有基础的就可以继续自己的语言。\n如果你三种语言都没学过，可以从Python(推荐CS61A: Structure and Interpretation of Computer Programs)开始。因为你大一下学期学校会开Python相关课程，这样会轻松一点（测控专业的同学大一下学期会学C++，所以你从C++开始也行）。\n刷题的话，可以去LeetCode、洛谷、AcWing在线题库刷一刷，这里有很多题目，可以帮助你提高编程能力。\n面试据计算机学院2024年普通本科生转专业实施方案所写。\n\n对转专业学生进行面试。学院组织专家逐一面试，面试时间每人7分钟：2分钟自我介绍（兴趣、特长、专业认知、专业志向、学习潜能等）+5分钟专家提问。大一期间，中国矿业大学程序设计学科竞赛或其他计算机相关学科竞赛可作为面试重要参考。\n\n由于初筛以及机考的难度增加，面试的比重逐渐降低，显得不是那么重要。请各位在面试之前调整心态，不要太过紧张就好。\n结语看到这里，我想你已经对这个流程有了大概的了解，可以去看看计算机的培养方案。如果你已经下定决心的话，那么现在就去做吧，先把前几年的真题做了，不懂可以Google一下或者问问ChatGPT，再去看看CS自学指南，加油！\nprint(&quot;祝你成功！&quot;)\n\n相关QQ群链接点击链接加入群聊【矿大转专业交流群(定期清低活,误踢请重新申请）】：831110233\n点击链接加入群聊【CUMT转计算机交流群】：866766652\n点击链接加入群聊【计算机资源分享群】：916483545\nQ&amp;A\nQ：转专业的时间点是什么时候？\nA：大一或者大二下学期五月初，具体时间以学校通知为准。\nQ：大二转专业和大一转专业有什么区别？\nA：大二转专业的话，可能修不完计算机的专业课，所以一般会降级，而且转专业的要求也会比大一严苛。所以最好大一就成功。\nQ：什么时候开始学习计算机专业的专业课程呢？\nA：大二开学之后开始学习计算机专业课。\n\n相关链接\n关于公布各学院2024年普通本科生转专业工作办法的通知\n\n关于做好2024年本科生转专业工作的通知\n\n中国矿业大学计算机科学与技术学院官网\n\n中国矿业大学转计算机学院机考试题\n\nCS自学指南\n\n\n","categories":["未来规划"],"tags":["转专业"]}]